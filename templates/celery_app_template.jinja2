"""
    This file has been generated by configure_celery
    You should not need to edit this file, however if you
    are moving the installation of FormShare to another directory
    then you either need to call again configure_celery or
    edit the FORMSHARE_INI_FILE so it points to the new path
"""

from celery import Celery
import configparser
from pkg_resources import iter_entry_points
import logging
import formshare.plugins as p
import os

log = logging.getLogger(__name__)

FORMSHARE_INI_FILE = (
    "{{ FORMSHARE_INI_FILE }}"
)
TASKS_ENTRY_POINT_GROUP = "formshare.tasks"
PLUGINS_ENTRY_POINT_GROUP = "formshare.plugins"
CELERY_PLUGINS_ENTRY_POINT_GROUP = "formshare.celery.plugins"
CELERY_TESTING_PLUGINS_ENTRY_POINT_GROUP = "formshare.celery.testing.plugins"


def get_ini_value(key, default=None):
    try:
        config = configparser.ConfigParser()
        config.read(FORMSHARE_INI_FILE)
        return config.get("app:formshare", key)
    except Exception as e:
        log.info("Warning: Unable to find key {}. {}. Default used".format(key, str(e)))
        return default


def get_tasks():
    tasks = []
    if os.environ.get("FORMSHARE_RUN_FROM_CELERY", "false") == "true":
        if os.environ.get("FORMSHARE_PYTEST_RUNNING", "false") == "false":
            celery_plugins = get_ini_value(CELERY_PLUGINS_ENTRY_POINT_GROUP, "")
            plugins = get_ini_value(PLUGINS_ENTRY_POINT_GROUP, "").split()
        else:
            celery_plugins = get_ini_value(CELERY_TESTING_PLUGINS_ENTRY_POINT_GROUP, "")
            plugins = []
        if celery_plugins:
            plugin_list = celery_plugins.split()
            plugin_list.reverse()
            print("Celery will execute plugins in this order: {}".format(",".join(plugin_list)))
        p.load_all_celery(celery_plugins)
        if plugins:
            plugin_list = plugins
            plugin_list.reverse()
            print("Looking for tasks in the following plugins: {}".format(",".join(plugin_list)))
        for plugin in plugins:
            if isinstance(plugin, str):
                iterator = iter_entry_points(group=TASKS_ENTRY_POINT_GROUP, name=plugin)
                entry_point = next(iterator, None)
                if entry_point:
                    tasks.append(entry_point.module_name)
    return tasks


celeryApp = Celery(
    get_ini_value("celery.taskname"),
    broker=get_ini_value("celery.broker"),
    backend=get_ini_value("celery.backend"),
    include=get_tasks(),
)

